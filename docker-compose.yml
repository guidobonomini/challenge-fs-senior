version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: taskmanagement-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: taskmanagement_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - taskmanagement-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 10s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: taskmanagement-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - taskmanagement-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 2s
      retries: 3
      start_period: 5s
    command: redis-server --appendonly yes

  # Backend API
  backend:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
      target: runner
    container_name: taskmanagement-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=development
      - PORT=8000
      - DB_HOST=database
      - DB_PORT=5432
      - DB_NAME=taskmanagement_dev
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your_super_secret_jwt_key_change_this_in_production
      - JWT_EXPIRES_IN=7d
      - JWT_REFRESH_SECRET=your_super_secret_refresh_key_change_this_in_production
      - JWT_REFRESH_EXPIRES_IN=30d
      - CORS_ORIGIN=http://localhost:3000
      - ANTHROPIC_API_KEY=anthropic_api_key_here
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - taskmanagement-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Frontend App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: runner
      args:
        - REACT_APP_API_URL=http://localhost:8000/api
    container_name: taskmanagement-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - taskmanagement-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 20s

  # Database Migration Service
  migrate:
    build:
      context: .
      dockerfile: ./backend/Dockerfile.migrate
    container_name: taskmanagement-migrate
    environment:
      - NODE_ENV=development
      - DB_HOST=database
      - DB_PORT=5432
      - DB_NAME=taskmanagement_dev
      - DB_USER=postgres
      - DB_PASSWORD=postgres
    depends_on:
      database:
        condition: service_healthy
    networks:
      - taskmanagement-network
    command: ["sh", "-c", "npm run migrate || exit 0"]
    restart: "no"
    profiles:
      - migration

  # Database Seeding Service
  seed:
    build:
      context: .
      dockerfile: ./backend/Dockerfile.migrate
    container_name: taskmanagement-seed
    environment:
      - NODE_ENV=development
      - DB_HOST=database
      - DB_PORT=5432
      - DB_NAME=taskmanagement_dev
      - DB_USER=postgres
      - DB_PASSWORD=postgres
    depends_on:
      database:
        condition: service_healthy
    networks:
      - taskmanagement-network
    command: ["npm", "run", "seed"]
    restart: "no"
    profiles:
      - seeding

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  taskmanagement-network:
    driver: bridge
    name: taskmanagement-network
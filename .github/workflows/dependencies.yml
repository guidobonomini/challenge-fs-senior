name: Dependency Management

on:
  schedule:
    # Run every Monday at 9:00 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
  push:
    paths:
      - 'backend/package.json'
      - 'backend/package-lock.json'
      - 'frontend/package.json'
      - 'frontend/package-lock.json'

env:
  NODE_VERSION: '18'

jobs:


  check-outdated:
    name: Check Outdated Packages
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json
      
      - name: Check backend outdated packages
        working-directory: ./backend
        run: |
          echo "ğŸ“¦ Checking backend outdated packages..."
          npm outdated --json > backend-outdated.json || true
          npm outdated || true
      
      - name: Check frontend outdated packages
        working-directory: ./frontend
        run: |
          echo "ğŸ“¦ Checking frontend outdated packages..."
          npm outdated --json > frontend-outdated.json || true
          npm outdated || true
      
      - name: Upload outdated reports
        uses: actions/upload-artifact@v4
        with:
          name: outdated-reports
          path: |
            backend/backend-outdated.json
            frontend/frontend-outdated.json





  create-dependency-report:
    name: Create Dependency Report
    runs-on: ubuntu-latest
    needs: [check-outdated]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download all reports
        uses: actions/download-artifact@v4
        with:
          path: reports/
      
      - name: Generate summary report
        run: |
          echo "# ğŸ“‹ Dependency Report - $(date)" > DEPENDENCY_REPORT.md
          echo "" >> DEPENDENCY_REPORT.md
          echo "## ğŸ“¦ Outdated Packages" >> DEPENDENCY_REPORT.md
          
          if [ -f reports/outdated-reports/backend-outdated.json ]; then
            backend_outdated=$(jq 'keys | length' reports/outdated-reports/backend-outdated.json 2>/dev/null || echo "0")
            echo "- **Backend**: $backend_outdated packages have updates available" >> DEPENDENCY_REPORT.md
          fi
          
          if [ -f reports/outdated-reports/frontend-outdated.json ]; then
            frontend_outdated=$(jq 'keys | length' reports/outdated-reports/frontend-outdated.json 2>/dev/null || echo "0")
            echo "- **Frontend**: $frontend_outdated packages have updates available" >> DEPENDENCY_REPORT.md
          fi
          

          

          
          echo "" >> DEPENDENCY_REPORT.md
          echo "---" >> DEPENDENCY_REPORT.md
          echo "*Report generated on $(date) by GitHub Actions*" >> DEPENDENCY_REPORT.md
      
      - name: Upload summary report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-summary
          path: DEPENDENCY_REPORT.md
      
      - name: Comment on recent PR or issue
        uses: actions/github-script@v7
        if: github.event_name == 'schedule'
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('DEPENDENCY_REPORT.md', 'utf8');
            
            // Find the most recent open issue or PR
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              sort: 'updated',
              per_page: 1
            });
            
            if (issues.length > 0) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues[0].number,
                body: `ğŸ¤– **Weekly Dependency Report**\n\n${report}`
              });
            }